Nom de l'exercice : cpp_module_00
Fichiers attendus : Warlock.cpp Warlock.hpp

Créez une classe Warlock. Elle doit suivre la forme de Coplien.

Elle possède les attributs privés suivants :

    name (chaîne de caractères)
    title (chaîne de caractères)

Étant donné qu'ils sont privés, vous devez écrire les accesseurs suivants :

    getName, qui retourne une référence à une chaîne de caractères constante.
    getTitle, qui retourne une référence à une chaîne de caractères constante.

Ces fonctions devront pouvoir être appelées sur un objet Warlock constant.

Créez le mutateur suivant :

    setTitle, qui retourne void et prend en paramètre une référence à une chaîne de caractères constante.

Votre Warlock aura aussi, en plus de ce qui est requis par la forme de Coplien, un constructeur qui prend, dans cet ordre, son nom et son titre. Il ne sera pas possible de copier un Warlock, de l'instancier par copie, ou de l'instancier sans nom et sans titre.

Par exemple :

cpp

Warlock bob;                            // Ne compile pas
Warlock bob("Bob", "le magnifique");     // Compile
Warlock jim("Jim", "le nauséabond");     // Compile
bob = jim;                              // Ne compile pas
Warlock jack(jim);                      // Ne compile pas

Lors de la création, le Warlock dit :

text

<NAME>: This looks like another boring day.

Naturellement, quand vous voyez des espaces réservés comme <NAME>, <TITLE>, etc., dans les sorties, vous les remplacerez par les valeurs appropriées sans les crochets < et >.

Quand il meurt, il dit :

text

<NAME>: My job here is done!

Votre Warlock doit également être capable de se présenter en se vantant de tout son pouvoir.

Vous devez donc écrire la fonction suivante :

    void introduce() const;

Elle doit afficher :

text

<NAME>: I am <NAME>, <TITLE>!

Voici un exemple d'une fonction main de test et de sa sortie associée :

int main()
{
  Warlock const richard("Richard", "Mistress of Magma");
  richard.introduce();
  std::cout << richard.getName() << " - " << richard.getTitle() << std::endl;

  Warlock* jack = new Warlock("Jack", "the Long");
  jack->introduce();
  jack->setTitle("the Mighty");
  jack->introduce();

  delete jack;

  return (0);
}



~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, Mistress of Magma!$
Richard - Mistress of Magma$
Jack: This looks like another boring day.$
Jack: I am Jack, the Long!$
Jack: I am Jack, the Mighty!$
Jack: My job here is done!$
Richard: My job here is done!$
~$
