### Nom de l'exercice : cpp_module02

---

#### Fichiers attendus :
- Warlock.cpp  
- Warlock.hpp  
- ASpell.hpp  
- ASpell.cpp  
- ATarget.hpp  
- ATarget.cpp  
- Fwoosh.hpp  
- Fwoosh.cpp  
- Dummy.hpp  
- Dummy.cpp  
- Fireball.hpp
- Fireball.cpp
- Polymorph.hpp
- Polymorph.cpp  
- BrickWall.hpp  
- BrickWall.cpp  
- SpellBook.hpp  
- SpellBook.cpp  



- TargetGenerator.hpp  
- TargetGenerator.cpp  

---

### Contraintes
Dans les classes **Warlock**, **SpellBook** et **TargetGenerator**, **l'utilisation du switch est INTERDITE**. Toute utilisation entra√Ænera une note de **-42**.

---

### D√©tails de l'impl√©mentation :

1. **Cr√©ation de nouveaux sorts :**
   - Impl√©mente deux nouveaux sorts sur le m√™me mod√®le que `Fwoosh` :
     - **Fireball** (Nom : "Fireball", Effets : "burnt to a crisp")
     - **Polymorph** (Nom : "Polymorph", Effets : "turned into a critter")





































2. **Cr√©ation d'une nouvelle cible :**
   - Ajoute une nouvelle cible que le `Warlock` pourra attaquer :
     - **BrickWall** (Type : "Inconspicuous Red-brick Wall").
























3. **Impl√©mentation de la classe `SpellBook` :**
   - Cr√©e une classe **SpellBook**, en forme canonique, 
   qui **ne peut pas √™tre copi√©e** ou **instanci√©e par copie**.


   - Elle doit contenir les fonctions suivantes :
     - `void learnSpell(ASpell*)` : 
     **Ajoute une copie** d'un sort dans le livre de sorts.
     - `void forgetSpell(std::string const &)` : 
     **Supprime un sort** du livre (sauf s'il n'y est pas).
     - `ASpell* createSpell(std::string const &)` : 
     **Retourne un sort** bas√© sur son nom, en cr√©ant une nouvelle instance.






























4. **Modification de la classe `Warlock` :**
   - Le `Warlock` doit maintenant **poss√©der un livre de sorts** (`SpellBook`).
   - Ce livre est **cr√©√© avec lui** et **d√©truit avec lui**.
   
 
   - Les fonctions `learnSpell` et `forgetSpell` du `Warlock` doivent maintenant **appeler celles du `SpellBook`**.
   - La fonction `launchSpell` doit **utiliser le `SpellBook`** pour cr√©er et lancer le sort demand√©.




























5. **Impl√©mentation de la classe `TargetGenerator` :**
   - Cr√©e une classe **TargetGenerator**, en forme canonique, qui **ne peut pas √™tre copi√©e**.
   - Elle doit contenir les fonctions suivantes :
     - `void learnTargetType(ATarget*)` : Ajoute une **cible connue** au g√©n√©rateur.
     - `void forgetTargetType(std::string const &)` : **Supprime une cible** du g√©n√©rateur si elle est connue.
     - `ATarget* createTarget(std::string const &)` : **Cr√©e et retourne une cible** en fonction de son type.










---

### Exemple de test

L'exemple de test `main` et le r√©sultat attendu sont fournis dans l'√©nonc√©. **Assure-toi de respecter les sorties exactes.**

---

Avec ces modifications, le `Warlock` pourra apprendre et oublier des sorts plus efficacement gr√¢ce au `SpellBook`, et attaquer diff√©rentes cibles gr√¢ce au `TargetGenerator`. üòä



int main()
{
  Warlock richard("Richard", "foo");
  richard.setTitle("Hello, I'm Richard the Warlock!");
  BrickWall model1;

  Polymorph* polymorph = new Polymorph();
  TargetGenerator tarGen;

  tarGen.learnTargetType(&model1);
  richard.learnSpell(polymorph);

  Fireball* fireball = new Fireball();

  richard.learnSpell(fireball);

  ATarget* wall = tarGen.createTarget("Inconspicuous Red-brick Wall");

  richard.introduce();
  richard.launchSpell("Polymorph", *wall);
  richard.launchSpell("Fireball", *wall);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, Hello, I'm Richard the Warlock!!$
Inconspicuous Red-brick Wall has been turned into a critter!$
Inconspicuous Red-brick Wall has been burnt to a crisp!$
Richard: My job here is done!$
~$
